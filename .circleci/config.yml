version: 2.1

parameters:

  gio_operation:
    type: enum
    enum: [build_k8s_cluster, build_k8s_cluster_terraform, sedex_dev_am_update_mongo_uri, sedex_dev_apim_update_am_uri, apim_nightly_episode2, delete_from_download_gravitee_io, none]
    default: delete_from_download_gravitee_io
  gio_action:
    type: enum
    enum: [release, standalone_release, standalone_release_replay, nexus_staging, vm_nexus_staging, pull_requests]
    default: pull_requests
  dry_run:
    type: boolean
    default: true
    description: "Run in dry run mode?"
  maven_profile_id:
    type: string
    default: "gravitee-dry-run"
    description: "Maven ID of the Maven profile to use for a dry run ?"
  secrethub_org:
    type: string
    default: "graviteeio"
    description: "SecretHub Org to use to fetch secrets ?"
  secrethub_repo:
    type: string
    default: "cicd"
    description: "SecretHub Repo to use to fetch secrets ?"
  s3_bucket_name:
    type: string
    default: ''
    description: "Name of the S3 Bucket used to store and retrieve the state of the maven project, to perform the nexus staging ?"
  replayed_release:
    type: string
    default: ''
    description: "What is the version number of the release you want to replay? (Mandatory, only for the 'standalone_release_replay' Workflow / see 'gio_action' pipeline parameter)"
orbs:
  gravitee: gravitee-io/gravitee@1.0
  secrethub: secrethub/cli@1.1
  gh: circleci/github-cli@1.0

executors:
  node-lts:
    parameters:
      class:
        description: The resource class
        type: enum
        enum: [ 'small', 'medium', 'large', 'xlarge' ]
        default: 'medium'
    docker:
      - image: cimg/node:14.18
    resource_class: <<parameters.class>>

jobs:

  delete_from_download_gravitee_io_job:
    docker:
      # - image: 'graviteeio/cicd-s3cmd:stable-latest'
      - image: 'cimg/base:stable'
    resource_class: medium
    # ---------
    environment:
      SECRETS_HOME: '/tmp/gravit33bot/.secrets'
      S3_BUCKET_NAME: << pipeline.parameters.s3_bucket_name >>
      DRY_RUN: << pipeline.parameters.dry_run >>
      WITH_CHECKSUMS: << pipeline.parameters.with_checksums >>
      # -- use GIO_RELEASE_VERSION only when useful to interpolate the name / path of the file to delete
      GIO_RELEASE_VERSION: '1.0.0'
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp
      - run:
          name: "Check Secrets"
          command: |
                    ls -allh ${SECRETS_HOME}/.s3cmd/aws_access_key
                    ls -allh ${SECRETS_HOME}/.s3cmd/aws_secret_key
                    export S3_SERVICE_AWS_ACCESS_KEY=$(cat ${SECRETS_HOME}/.s3cmd/aws_access_key)
                    export S3_SERVICE_AWS_SECRET_KEY=$(cat ${SECRETS_HOME}/.s3cmd/aws_secret_key)
                    echo "export S3_SERVICE_AWS_ACCESS_KEY=${S3_SERVICE_AWS_ACCESS_KEY}" >> $BASH_ENV
                    echo "export S3_SERVICE_AWS_SECRET_KEY=${S3_SERVICE_AWS_SECRET_KEY}" >> $BASH_ENV
                    echo "export S3_BUCKET_NAME=${S3_BUCKET_NAME}" >> $BASH_ENV
      - run:
          name: "Check Executor Environment"
          command: |
                    echo "# ----------------------------------------------------------------- #"
                    pwd && ls -alh && whoami
                    echo "# ----------------------------------------------------------------- #"
                    # s3cmd --version
      - run:
          name: "Check Pipeline Environment Variables"
          command: |
                    echo "# ----------------------------------------------------------------- #"
                    echo "    DRY_RUN=[${DRY_RUN}]"
                    echo "    S3_SERVICE_AWS_ACCESS_KEY=[${S3_SERVICE_AWS_ACCESS_KEY}]"
                    echo "    S3_SERVICE_AWS_SECRET_KEY=[${S3_SERVICE_AWS_SECRET_KEY}]"
                    echo "    S3_BUCKET_NAME=[${S3_BUCKET_NAME}]"
                    echo "    WITH_CHECKSUMS=[${WITH_CHECKSUMS}]"
                    echo "    GIO_RELEASE_VERSION=[${GIO_RELEASE_VERSION}]"
                    echo "# ----------------------------------------------------------------- #"
      - run:
          name: "Generate [release_version_file_helper] for the next step ([d_delete_from_download_gio]) "
          command: |
                    echo ${GIO_RELEASE_VERSION} > /tmp/gio.release.version

      # ---
      # Will delete :
      # => https://download.gravitee.io/graviteeio-apim/distributions/graviteeio-full-3.5.18.zip
      # and also deletes its associated checsum files :
      # => https://download.gravitee.io/graviteeio-apim/distributions/graviteeio-full-3.5.18.zip.md5
      # => https://download.gravitee.io/graviteeio-apim/distributions/graviteeio-full-3.5.18.zip.sha1
      # => https://download.gravitee.io/graviteeio-apim/distributions/graviteeio-full-3.5.18.zip.sha512sum
      - gravitee/d_delete_from_download_gio:
          dry_run: true
          with_checksums: true
          publish_folder_path: graviteeio-apim/distributions/
          publish_zip_filename: graviteeio-full-3.11.0.zip
          release_version_file_helper: /tmp/gio.release.version
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          placeholder: GIO_VERSION_PLACEHOLDER

  publish-on-artifactory-and-nexus:
    docker:
      - image: circleci/openjdk:11-jdk-stretch
    resource_class: large
    environment:
      NEXUS_SNAPSHOTS_URL: 'https://oss.sonatype.org/content/repositories/snapshots'
      NEXUS_SNAPSHOTS_SERVER_ID: 'sonatype-nexus-snapshots'
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - restore_cache:
          keys:
            - gravitee-api-management-{{ .Branch }}-{{ checksum "pom.xml" }}
            - gravitee-api-management
      - secrethub/install
      - run:
          name: "Maven Package and deploy to Artifactory [gravitee-snapshots] repository"
          command: |
            mvn -s /tmp/.artifactory.settings.xml -P gio-dev clean deploy --no-transfer-progress -DskipTests -T 2C
      - run:
          name: "Exclude Gravitee internal dependencies from cache"
          command: |
            if [ -d ${HOME}/.m2/io/gravitee ]; then
              rm -fr ${HOME}/.m2/io/gravitee
            fi;
            if [ -d ${HOME}/.m2/com/graviteesource ]; then
              rm -fr ${HOME}/.m2/com/graviteesource
            fi;
      - save_cache:
          paths:
            - ~/.m2
          key: gravitee-api-management-{{ .Branch }}-{{ checksum "pom.xml" }}
          when: always
      - run:
          name: "Maven Package and deploy to Nexus Snapshots"
          command: |
            mvn -s /tmp/.nexus.settings.xml deploy --no-transfer-progress -DskipTests -T 2C -DaltDeploymentRepository=${NEXUS_SNAPSHOTS_SERVER_ID}::default::${NEXUS_SNAPSHOTS_URL}

  console-webui-install:
    executor:
      name: node-lts
      class: small
    steps:
      - checkout
      - restore_cache:
          name: Restore NPM cache
          keys:
            - gravitee-apim-console-webui-cache-v1-{{ checksum "gravitee-apim-console-webui/package-lock.json" }}
      - run:
          name: Install dependencies
          command: npm install
          working_directory: gravitee-apim-console-webui
      - save_cache:
          name: Save NPM cache
          key: gravitee-apim-console-webui-cache-v1-{{ checksum "gravitee-apim-console-webui/package-lock.json" }}
          paths:
            - ./gravitee-apim-console-webui/node_modules
      - persist_to_workspace:
          root: .
          paths:
            - gravitee-apim-console-webui/node_modules

  console-webui-lint-test:
    executor:
      name: node-lts
      class: medium
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check License
          command: npm run lint:license
          working_directory: gravitee-apim-console-webui
      - run:
          name: Run Prettier and ESLint
          command: npm run lint
          working_directory: gravitee-apim-console-webui
      - run:
          name: Run unit tests
          command: npm run test:ci
          working_directory: gravitee-apim-console-webui

  console-webui-build:
    executor:
      name: node-lts
      class: large
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Build
          command: npm run build:prod
          environment:
            NODE_OPTIONS: --max_old_space_size=4086
            BACKEND_ENV: element-zero
          working_directory: gravitee-apim-console-webui
      - run:
          name: Zip dist folder
          command: zip -r dist.zip dist
          working_directory: gravitee-apim-console-webui
      - persist_to_workspace:
          root: .
          paths:
            - gravitee-apim-console-webui/dist
      - store_artifacts:
          path: gravitee-apim-console-webui/dist.zip
          destination: build-output

  console-webui-deploy-on-azure-storage:
    docker:
      - image: mcr.microsoft.com/azure-cli:latest
    resource_class: small
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Login into Azure Storage and upload dist
          command: |
            export BRANCH_ID=$(echo "$CIRCLE_BRANCH" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
            az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
            az storage container create -n $BRANCH_ID --public-access blob
            az storage blob upload-batch -s gravitee-apim-console-webui/dist -d $BRANCH_ID

  console-webui-comment-pr-after-deployment:
    executor:
      name: node-lts
      class: small
    steps:
      - checkout
      - gh/setup
      - run:
          name: Comment Pull Request
          command: |
            # First check there is an associated pull request, otherwise just stop the job here
            if ! gh pr view --json title;
            then
              echo "No PR found for this branch, stopping the job here."
              exit 0
            fi

            export BRANCH_ID=$(echo "$CIRCLE_BRANCH" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
            gh pr comment --body "**Gravitee.io Automatic Deployment**

            Congrats, all the CI steps were 🟢 . The Bot was able to deploy the build of this PR, so you can now try it directly [here](https://apimnightlywebui24386.blob.core.windows.net/${BRANCH_ID}/index.html)! 🚀

            _Notes_: The deployed app is linked to the management API of the Element Zero team's environment."

workflows:
  pull_requests:
    when:
      and:
        - equal: [ pull_requests, << pipeline.parameters.gio_action >> ]
    jobs:
      - gravitee/d_pull_requests_secrets:
          context: cicd-orchestrator
          name: pr_secrets_resolution
      - gravitee/d_pr_tests_containers_qa:
          context: gravitee-qa
          name: process_pull_request_qa
          requires:
            - pr_secrets_resolution
          # "What is the maven ID of the maven profile to use to build and deploy SNAPSHOTS to Prviate Artifactory ?"
          maven_profile_id: 'gio-dev'
      - publish-on-artifactory-and-nexus:
          requires:
            - process_pull_request_qa
              # filters:
              # branches:
              # ignore:
            # - master
            # --- +
            #  No Standard pull request for Mongo : Only Test Containers
            # --- +
            # - gravitee/d_pull_requests_ce:
            # name: process_pull_request
            # requires:
            # - pr_secrets_resolution
            # # "What is the maven ID of the maven profile to use to build and deploy SNAPSHOTS to Prviate Artifactory ?"
            # maven_profile_id: 'gio-dev'
            # nexus_snapshots_url: 'https://oss.sonatype.org/content/repositories/snapshots'
            # nexus_snapshots_server_id: 'sonatype-nexus-snapshots'
            # container_gun_image_org: 'circleci'
            # container_gun_image_name: 'openjdk'
            # container_gun_image_tag: '11.0.3-jdk-stretch'
            # filters:
            # branches:
            # ignore:
          # - master
      - console-webui-install:
          requires:
            - pr_secrets_resolution
      - console-webui-lint-test:
          requires:
            - console-webui-install
      - console-webui-build:
          requires:
            - console-webui-install
      - console-webui-deploy-on-azure-storage:
          context: cicd-orchestrator
          pre-steps:
            - secrethub/env-export:
                secret-path: graviteeio/cicd/azure/application-id
                var-name: AZURE_APPLICATION_ID
            - secrethub/env-export:
                secret-path: graviteeio/cicd/azure/tenant
                var-name: AZURE_TENANT
            - secrethub/env-export:
                secret-path: graviteeio/cicd/azure/application-secret
                var-name: AZURE_APPLICATION_SECRET
          requires:
            - console-webui-build
      - console-webui-comment-pr-after-deployment:
          context: cicd-orchestrator
          pre-steps:
            - secrethub/env-export:
                secret-path: graviteeio/cicd/graviteebot/github_personal_access_token
                var-name: GITHUB_TOKEN
          requires:
            - console-webui-deploy-on-azure-storage
  # ---
  # The 2 Workflows Below are there for the CICD Orchestrator to be able to
  # release Gravitee Kubernetes in an APIM release Process, with Docker executors instead of VMs
  release:
    when:
      and:
        - equal: [ release, << pipeline.parameters.gio_action >> ]
        - not: << pipeline.parameters.dry_run >>
    jobs:
      - gravitee/d_release_secrets:
          context: cicd-orchestrator
          name: release_secrets_resolution
      - gravitee/d_release:
          name: maven_n_git_release
          requires:
            - release_secrets_resolution
          dry_run: false
          maven_profile_id: << pipeline.parameters.maven_profile_id >>
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'

  release_dry_run:
    when:
      and:
        - equal: [ release, << pipeline.parameters.gio_action >> ]
        - << pipeline.parameters.dry_run >>
    jobs:
      - gravitee/d_release_secrets:
          context: cicd-orchestrator
          name: release_secrets_resolution
      - gravitee/d_release:
          name: maven_n_git_release
          requires:
            - release_secrets_resolution
          dry_run: true
          maven_profile_id: << pipeline.parameters.maven_profile_id >>
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'
  # ---
  # CICD Workflow For APIM Orchestrated Nexus Staging, Container-based : Circle CI Docker Executor
  nexus_staging:
    when:
      equal: [ nexus_staging, << pipeline.parameters.gio_action >> ]
    jobs:
      - gravitee/d_nexus_staging_secrets:
          context: cicd-orchestrator
          name: nexus_staging_secrets_resolution
      - gravitee/d_nexus_staging:
          name: nexus_staging
          requires:
            - nexus_staging_secrets_resolution
          dry_run: << pipeline.parameters.dry_run >>
          maven_profile_id: << pipeline.parameters.maven_profile_id >>
          # => If you are running a standalone release, your S3 Bucket name
          #    is 'prepared-standalone-nexus-staging-${GRAVITEE_REPO_NAME}-${RELEASE_VERSION_NUMBER}'
          # => If you are running an Orchestrated release, The Orchestrator knows how to compute the S3 Bucket name
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'
  # ---
  # The 6 Workflows Below are there to perform a "Standalone Release" and "replay" a "Standalone Release" :
  # => independently of any APIM release Process, with Docker executors instead of VMs
  # => with chained nexus staging : only when release with dry run mode off
  standalone_release:
    when:
      and:
        - equal: [ standalone_release, << pipeline.parameters.gio_action >> ]
        - not: << pipeline.parameters.dry_run >>
    jobs:
      - gravitee/d_release_secrets:
          context: cicd-orchestrator
          name: release_secrets_resolution
      - gravitee/d_standalone_release:
          name: maven_n_git_release
          requires:
            - release_secrets_resolution
          dry_run: false
          maven_profile_id: << pipeline.parameters.maven_profile_id >>
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'

  standalone_release_dry_run:
    when:
      and:
        - equal: [ standalone_release, << pipeline.parameters.gio_action >> ]
        - << pipeline.parameters.dry_run >>
    jobs:
      - gravitee/d_release_secrets:
          context: cicd-orchestrator
          name: release_secrets_resolution
      - gravitee/d_standalone_release:
          name: maven_n_git_release
          requires:
            - release_secrets_resolution
          dry_run: true
          maven_profile_id: << pipeline.parameters.maven_profile_id >>
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'

  standalone_nexus_staging:
    # ---
    # Running the nexus staging makes sense only when the
    # standalone release is being performed with dry run mode off
    # That is to say, when the maven project is ready to be release to maven Staging
    # ---
    when:
      and:
        - equal: [ standalone_release, << pipeline.parameters.gio_action >> ]
        - not: << pipeline.parameters.dry_run >>
      # ---
      # Running the nexus staging makes sense only when the
      # standalone release is being performed with dry run mode off
      # That is to say, when the maven project is ready to be release to mmaven Staging
      # Never the less, to test the CICD system, I temporarily git pushed a different configuration
      # ---
      # when:
      # equal: [ standalone_release, << pipeline.parameters.gio_action >> ]
    jobs:
      - gravitee/d_nexus_staging_secrets:
          context: cicd-orchestrator
          name: nexus_staging_secrets_resolution
      - nexus_staging_dry_run_approval:
          type: approval
          requires:
            - nexus_staging_secrets_resolution
      - gravitee/d_standalone_nexus_staging:
          name: standalone_nexus_staging_dry_run
          requires:
            - nexus_staging_dry_run_approval
            # - nexus_staging_secrets_resolution
          dry_run: true
          # maven_profile_id: << pipeline.parameters.maven_profile_id >>
          maven_profile_id: "gravitee-release"
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'
      - gravitee/d_standalone_nexus_staging:
          name: standalone_nexus_staging
          requires:
            - standalone_nexus_staging_dry_run
            # - nexus_staging_secrets_resolution
          dry_run: false
          # maven_profile_id: << pipeline.parameters.maven_profile_id >>
          maven_profile_id: "gravitee-release"
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'

  standalone_release_replay:
    when:
      and:
        - equal: [ standalone_release_replay, << pipeline.parameters.gio_action >> ]
        - not: << pipeline.parameters.dry_run >>
    jobs:
      - gravitee/d_release_secrets:
          context: cicd-orchestrator
          name: release_secrets_resolution
      - gravitee/d_standalone_release_replay:
          name: maven_n_git_release
          requires:
            - release_secrets_resolution
          dry_run: false
          maven_profile_id: << pipeline.parameters.maven_profile_id >>
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          gio_release_version: << pipeline.parameters.replayed_release >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'

  standalone_release_replay_dry_run:
    when:
      and:
        - equal: [ standalone_release_replay, << pipeline.parameters.gio_action >> ]
        - << pipeline.parameters.dry_run >>
    jobs:
      - gravitee/d_release_secrets:
          context: cicd-orchestrator
          name: release_secrets_resolution
      - gravitee/d_standalone_release_replay:
          name: maven_n_git_release
          requires:
            - release_secrets_resolution
          dry_run: true
          maven_profile_id: << pipeline.parameters.maven_profile_id >>
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          gio_release_version: << pipeline.parameters.replayed_release >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'

  standalone_nexus_staging_replay:
    # ---
    # Running the nexus staging makes sense only when the
    # standalone release is being performed with dry run mode off
    # That is to say, when the maven project is ready to be release to maven Staging
    # ---
    when:
      and:
        - equal: [ standalone_release_replay, << pipeline.parameters.gio_action >> ]
        - not: << pipeline.parameters.dry_run >>
      # ---
      # Running the nexus staging makes sense only when the
      # standalone release is being performed with dry run mode off
      # That is to say, when the maven project is ready to be release to mmaven Staging
      # Never the less, to test the CICD system, I temporarily git pushed a different configuration
      # ---
      # when:
      # equal: [ standalone_release, << pipeline.parameters.gio_action >> ]
    jobs:
      - gravitee/d_nexus_staging_secrets:
          context: cicd-orchestrator
          name: nexus_staging_secrets_resolution
      - nexus_staging_replay_dry_run_approval:
          type: approval
          requires:
            - nexus_staging_secrets_resolution
      - gravitee/d_standalone_nexus_staging_replay:
          name: standalone_nexus_staging_replay_dry_run
          requires:
            - nexus_staging_replay_dry_run_approval
            # - nexus_staging_secrets_resolution
          dry_run: true
          # maven_profile_id: << pipeline.parameters.maven_profile_id >>
          maven_profile_id: "gravitee-release"
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          gio_release_version: << pipeline.parameters.replayed_release >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'
      - gravitee/d_standalone_nexus_staging_replay:
          name: standalone_nexus_staging_replay
          requires:
            - standalone_nexus_staging_replay_dry_run
            # - nexus_staging_secrets_resolution
          dry_run: false
          # maven_profile_id: << pipeline.parameters.maven_profile_id >>
          maven_profile_id: "gravitee-release"
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>
          gio_release_version: << pipeline.parameters.replayed_release >>
          # container_gun_image_org: 'circleci'
          # container_gun_image_name: 'openjdk'
          # container_gun_image_tag: '11.0.3-jdk-stretch'
          container_size: 'large'


  # ---
  # CICD Workflow For APIM Orchestrated Nexus Staging, VM-based
  vm_nexus_staging:
    when:
      equal: [ vm_nexus_staging, << pipeline.parameters.gio_action >> ]
    jobs:
      - gravitee/nexus_staging:
          context: cicd-orchestrator
          secrethub_org: << pipeline.parameters.secrethub_org >>
          secrethub_repo: << pipeline.parameters.secrethub_repo >>
          maven_profile_id: << pipeline.parameters.maven_profile_id >>
          s3_bucket_name: << pipeline.parameters.s3_bucket_name >>


  # ---
  # Nighlty for all CE repositories :
  # builds the SNAPSHOT, and deploys
  # it into Gravitee Private Artifactory
  # --
  # No Nexus deployment
  # ---
  nightly:
    when:
      equal: [ nightly, << pipeline.parameters.gio_action >> ]
        # triggers:
        # - schedule:
        # cron: "0 0 * * *"
        # filters:
        # branches:
      # only:
      # - master
      # - /^[0-999].[0-999].x/
    jobs:
      - gravitee/d_all_nightly_secrets:
          context: cicd-orchestrator
          name: nightly_secrets_resolution
          filters:
            branches:
              only:
                - master
                - /^[0-999].[0-999].x/
      - gravitee/d_all_nightly_ce:
          name: process_pull_request
          requires:
            - nightly_secrets_resolution
          filters:
            branches:
              only:
                - master
                - /^[0-999].[0-999].x/
